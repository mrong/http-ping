#!/usr/bin/env python3

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# *                                                                         * *
# * Authors:            Michael Wieland                                     * *
# *                     github@selfcoders.com                               * *
# *                     https://selfcoders.com                              * *
# *                                                                         * *
# *                     Michael Rong                                        * *
# *                     miro@electronic.works                               * *
# *                                                                         * *
# * Creation Date:      09/10/2017                                          * *
# *                                                                         * *
# * Version:            0.2.0                                               * *
# *                                                                         * *
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# *                                                                         * *
# *  Copyright (C) 2017 Michael Wieland and Michael Rong                    * *
# *                                                                         * *
# *  'http-ping' is free software:                                          * *
# *  you can redistribute it and/or modify                                  * *
# *  it under the terms of the GNU General Public License as published by   * *
# *  the Free Software Foundation, version 3 of the License.                * *
# *                                                                         * *
# *  'http-ping' is distributed in the hope that it will be                 * *
# *  useful, but WITHOUT ANY WARRANTY; without even the implied warranty    * *
# *  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       * *
# *  GNU General Public License for more details.                           * *
# *                                                                         * *
# *  You should have received a copy of the GNU General Public License      * *
# *  along with 'http-ping'. If not, see                                    * *
# *  <http://www.gnu.org/licenses/>.                                        * *
# *                                                                         * *
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

import argparse
import signal
import socket
import sys
import time
from http.client import responses
from urllib.parse import urlparse

try:
    import argcomplete
except ImportError:
    argcomplete = None

from lib.ping import Ping
from lib.table import Table


def get_max_description_length():
    max_length = 0

    for http_status in enumerate(responses):
        length = len(responses[http_status[1]])

        if length > max_length:
            max_length = length

    return max_length


def dns_lookup(host, v4, v6):
    all_address_info = []

    if v4:
        try:
            all_address_info += socket.getaddrinfo(host, None, socket.AF_INET)
        except socket.gaierror:
            pass

    if v6:
        try:
            all_address_info += socket.getaddrinfo(host, None, socket.AF_INET6)
        except socket.gaierror:
            pass

    all_ip_addresses = set()

    for entry in all_address_info:
        all_ip_addresses.add(entry[4][0])

    return all_ip_addresses


def show_stats(ping):
    stats = ping.calculate_stats()

    print("")
    print("-- Statistics ---")
    print("{} requests - {} successful ({}%), {} failed ({}%)".format(stats["total_requests"], stats["successful_requests"], stats["successful_requests_percentage"], stats["failed_requests"], stats["failed_requests_percentage"]))
    print("Average time: {} seconds".format(round(stats["average_time"], 2)))


def main():
    argument_parser = argparse.ArgumentParser(description="Request the given URL in a loop")

    argument_parser.add_argument("--all-ips", "-a", action="store_true", help="request the given URL from all IP addresses behind the domain")
    argument_parser.add_argument("--ipv4", "-4", action="store_true", help="use IPv4 addresses only")
    argument_parser.add_argument("--ipv6", "-6", action="store_true", help="use IPv6 addresses only")
    argument_parser.add_argument("--iterations", "-i", help="check the URL the given times (default: no limit)")
    argument_parser.add_argument("--sleep", "-s", help="sleep the given time (default: 1 second)", default=1)
    argument_parser.add_argument("--timeout", "-t", help="timeout for a single request (default: none)")

    argument_parser.add_argument("url", help="the URL to request")
    argument_parser.add_argument("curl_options", nargs=argparse.REMAINDER, help="additional options to pass to curl")

    if argcomplete:
        argcomplete.autocomplete(argument_parser)

    if len(sys.argv) == 1:
        argument_parser.print_help()
        sys.exit(1)

    arguments = argument_parser.parse_args()

    max_iterations = arguments.iterations
    sleep = arguments.sleep
    url = arguments.url

    use_all_ips = arguments.all_ips

    lookup_ipv4 = False
    lookup_ipv6 = False

    if arguments.ipv4:
        lookup_ipv4 = True
    elif arguments.ipv6:
        lookup_ipv6 = True
    else:
        lookup_ipv4 = True
        lookup_ipv6 = True

    host = urlparse(url).netloc.split(":")[0]
    ips = dns_lookup(host, lookup_ipv4, lookup_ipv6)

    if not ips:
        print("Could not resolve host: {}".format(host))
        exit(1)

    iteration = 0
    max_ip_length = 0

    for ip in ips:
        length = len(ip)

        if length > max_ip_length:
            max_ip_length = length

    if max_iterations:
        print("Pinging {} {} times".format(url, max_iterations))
    else:
        print("Pinging {}".format(url))

    print("")

    table_columns = [
        ("request_no", 3, "right"),
        ("ip", max(2, max_ip_length), "left"),
        ("status", 6, "right"),
        ("time", 5, "right"),
        ("description", max(11, get_max_description_length()), "left"),
    ]

    table = Table(columns=table_columns, column_separator="   ")

    header_length = table.print_row({
        "request_no": "#",
        "ip": "IP",
        "status": "Status",
        "time": "Time",
        "description": "Description",
    })

    print("".ljust(header_length, "-"))

    ping = Ping(url=url, timeout=arguments.timeout, additional_curl_options=arguments.curl_options, ipv4_only=arguments.ipv4, ipv6_only=arguments.ipv6)

    signal.signal(signal.SIGINT, lambda signal_no, frame: (show_stats(ping), exit(0)))

    while True:
        iteration += 1

        if use_all_ips:
            for ip in ips:
                table.print_row(ping.do_request(ip))
        else:
            table.print_row(ping.do_request(None))

        if max_iterations and iteration >= int(max_iterations):
            show_stats(ping)
            break

        time.sleep(float(sleep))


if __name__ == "__main__":
    main()
