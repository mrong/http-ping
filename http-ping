#!/bin/bash

script_path=$(dirname $(realpath $0))
source "${script_path}/http-code-to-text.sh"

function show_stats()
{
    local total_requests=$((successful_requests + failed_requests))
    local average_time=$(awk "BEGIN {print ${total_time} / ${total_requests}}")
    local successful_requests_percentage=$(awk "BEGIN {print ${successful_requests} / ${total_requests} * 100}")
    local failed_requests_percentage=$(awk "BEGIN {print ${failed_requests} / ${total_requests} * 100}")

    echo ""
    echo "--- Statistics ---"
    echo "${total_requests} requests - ${successful_requests} successful (${successful_requests_percentage}%), ${failed_requests} failed (${failed_requests_percentage}%)"
    echo "Average time: ${average_time}"
    exit
}

trap show_stats SIGINT

loop_iterations=0
sleep_time=1

iteration=0
total_time=0
successful_requests=0
failed_requests=0

while getopts "hi:s:t:" arg; do
    case ${arg} in
        h)
            show_usage=true
        ;;
        i)
            loop_iterations=${OPTARG}
        ;;
        s)
            sleep_time=${OPTARG}
        ;;
        t)
            timeout=${OPTARG}
        ;;
    esac
done

shift $((${OPTIND} - 1))

url="$1"

if [ -z "${url}" ] || [ ${show_usage} ]; then
    echo "Usage: $0 [options] <url>"
    echo ""
    echo "Options:"
    echo "  -i  Check the URL the given times"
    echo "  -s  Sleep the given time (see 'man sleep')"
    echo "  -t  Timeout for a single request"
    echo "  -h  Show this help message"
    exit
fi

url_regex="(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]"

if [[ $1 =~ ${url_regex} ]]; then
    url=$1

    curl_options=("-w \"%{http_code} %{time_total}\n\" -o /dev/null -s")

    if [ ${timeout} ]; then
        curl_options+=("--max-time ${timeout}")
    fi

    curl_command="curl ${curl_options[*]} ${url}"

    echo -e "\n#\tStatus\tTime\t\tDescription"
    echo "-------------------------------------------------------------------------------"

    while [ true ]; do
        iteration=$((iteration + 1))

        status=$(eval ${curl_command})

        set - ${status}

        code=$1
        time=$2
        description=$(http_code_to_text ${code})

        echo -e "${iteration}\t${code}\t${time}\t${description}"

        total_time=$(awk "BEGIN {print ${total_time} + ${time}}")

        if [ $code -gt 99 ] && [ $code -lt 400 ]; then
            successful_requests=$((successful_requests + 1))
        else
            failed_requests=$((failed_requests + 1))
        fi

        if [ $loop_iterations -gt 0 ] && [ $iteration -eq $loop_iterations ]; then
            break
        fi

        sleep ${sleep_time}
    done

    show_stats
else
    echo "URL '${url}' is not a valid link"
fi
