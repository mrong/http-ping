#!/bin/bash

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# *                                                                         * *
# * Authors:            Michael Wieland                                     * *
# *                     github@selfcoders.com                               * *
# *                     https://selfcoders.com                              * *
# *                                                                         * *
# *                     Michael Rong                                        * *
# *                     miro@electronic.works                               * *
# *                                                                         * *
# * Creation Date:      09/10/2017                                          * *
# *                                                                         * *
# * Version:            0.1.0                                               * *
# *                                                                         * *
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# *                                                                         * *
# *  Copyright (C) 2017 Michael Wieland and Michael Rong                    * *
# *                                                                         * *
# *  'http-ping' is free software:                                          * *
# *  you can redistribute it and/or modify                                  * *
# *  it under the terms of the GNU General Public License as published by   * *
# *  the Free Software Foundation, version 3 of the License.                * *
# *                                                                         * *
# *  'http-ping' is distributed in the hope that it will be                 * *
# *  useful, but WITHOUT ANY WARRANTY; without even the implied warranty    * *
# *  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       * *
# *  GNU General Public License for more details.                           * *
# *                                                                         * *
# *  You should have received a copy of the GNU General Public License      * *
# *  along with 'http-ping'. If not, see                                    * *
# *  <http://www.gnu.org/licenses/>.                                        * *
# *                                                                         * *
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

script_path=$(dirname $(realpath $0))
source "${script_path}/http-code-to-text.sh"
source "${script_path}/parse-url.sh"

function show_stats()
{
    local total_requests=$((successful_requests + failed_requests))
    local average_time=$(awk "BEGIN {print ${total_time} / ${total_requests}}")
    local successful_requests_percentage=$(awk "BEGIN {print ${successful_requests} / ${total_requests} * 100}")
    local failed_requests_percentage=$(awk "BEGIN {print ${failed_requests} / ${total_requests} * 100}")

    echo ""
    echo "--- Statistics ---"
    echo "${total_requests} requests - ${successful_requests} successful (${successful_requests_percentage}%), ${failed_requests} failed (${failed_requests_percentage}%)"
    echo "Average time: ${average_time}"
    exit
}

function dns_lookup()
{
    dig +short A $1
    dig +short AAAA $1
}

function do_request()
{
    local connect_to_ip=$1

    iteration=$((iteration + 1))

    curl_options=("-w \"%{http_code} %{time_total} %{remote_ip}\n\" -o /dev/null -s")

    if [ ${timeout} ]; then
        curl_options+=("--max-time ${timeout}")
    fi

    if [ ${connect_to_ip} ]; then
        if [ -z ${parse_url_port} ]; then
            case ${parse_url_protocol} in
                http)
                    parse_url_port=80
                ;;
                https)
                    parse_url_port=443
                ;;
            esac
        fi

        curl_options+=("--resolve ${parse_url_host}:${parse_url_port}:${connect_to_ip}")
    fi

    curl_command="curl ${curl_options[*]} ${url}"

    status=$(eval ${curl_command})

    set - ${status}

    code=$1
    time=$2
    ip=$3
    description=$(http_code_to_text ${code})

    if [ ${ip} ]; then
        ip_string=$(printf "%-${max_ip_length}s" ${ip})

        echo -e "${iteration}\t${ip_string}\t${code}\t${time}\t${description}"
    else
        echo -e "${iteration}\t${code}\t${time}\t${description}"
    fi

    total_time=$(awk "BEGIN {print ${total_time} + ${time}}")

    if [ ${code} -gt 99 ] && [ ${code} -lt 400 ]; then
        successful_requests=$((successful_requests + 1))
    else
        failed_requests=$((failed_requests + 1))
    fi
}

trap show_stats SIGINT

loop_iterations=0
sleep_time=1

iteration=0
total_time=0
successful_requests=0
failed_requests=0

while getopts "ahi:s:t:" arg; do
    case ${arg} in
        a)
            request_from_all_ips=true
        ;;
        h)
            show_usage=true
        ;;
        i)
            loop_iterations=${OPTARG}
        ;;
        s)
            sleep_time=${OPTARG}
        ;;
        t)
            timeout=${OPTARG}
        ;;
    esac
done

shift $((${OPTIND} - 1))

url="$1"

if [ -z "${url}" ] || [ ${show_usage} ]; then
    echo "Usage: $0 [-h] [-i iterations] [-s sleep] [-t timeout] <url>"
    echo ""
    echo "Options:"
    echo "  -a  Request the given URL from all IP addresses behind the domain"
    echo "  -i  Check the URL the given times (default: no limit)"
    echo "  -s  Sleep the given time (default: 1, see 'man sleep')"
    echo "  -t  Timeout for a single request (default: none)"
    echo "  -h  Show this help message"
    echo ""
    echo "Note: Passing additional curl options might break the output (especially '-w, --write-out <format>')"
    exit
fi

url_regex="(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]"

if [[ ${url} =~ ${url_regex} ]]; then
    parse_url ${url}
    ips=$(dns_lookup ${parse_url_host})

    max_ip_length=0

    for ip in ${ips}; do
        ip_length=${#ip}

        if [ ${ip_length} -gt ${max_ip_length} ]; then
            max_ip_length=${ip_length}
        fi
    done

    echo -e "\n#\t$(printf "%-${max_ip_length}s" "IP")\tStatus\tTime\t\tDescription"
    echo "-------------------------------------------------------------------------------"

    while [ true ]; do
        if [ ${request_from_all_ips} ]; then
            for ip in ${ips}; do
                do_request ${ip}
            done
        else
            do_request
        fi

        if [ ${loop_iterations} -gt 0 ] && [ ${iteration} -eq ${loop_iterations} ]; then
            break
        fi

        sleep ${sleep_time}
    done

    show_stats
else
    echo "URL '${url}' is not a valid link"
fi
